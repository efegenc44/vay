module Intrinsics

builtin U64 {
    fun add(this, that : U64) : U64
    fun subtract(this, that : U64) : U64
    fun multiply(this, that : U64) : U64
    fun equals(this, that : U64) : Bool
    fun compare(this, that : U64) : Core::Ordering
    fun toF32(this) : F32
}

builtin F32 {
    fun add(this, that : F32) : F32
    fun subtract(this, that : F32) : F32
    fun multiply(this, that : F32) : F32
    fun divide(this, that : F32) : F32
    fun equals(this, that : F32) : Bool
    fun compare(this, that : F32) : Core::Ordering
}

builtin Char {
    fun equals(this, that : Char) : Bool
}

builtin Array(T) {
    fun length(this) : U64
    fun append(this, value : T)
    fun pop(this) : T
    fun get(this, index : U64) : T

    fun add(this, that : Array(T)) : Array(T) = (
        let result = [] in (
            let i = 0 in while i < this.length(), i = i + 1 then {
                result.append(this.get(i))
            }
            let i = 0 in while i < that.length(), i = i + 1 then {
                result.append(that.get(i))
            }

            result
        )
    )

    fun:(T (Equatable)) equals(this, that : Array(T)) : Bool =
        this.length() == that.length() & (
            let i = 0 in while i < this.length(), i = i + 1 then {
                match this.get(i) == that.get(i) {
                    let .True : ()
                    let .False : return False
                }
            }

            True
        )
}

struct ArrayView(T) {
    array : Array(T)
    start : U64
    length : U64

    fun toArray(this) : Array(T) =
        let result = [] in (
            let end = this.start + this.length in
            let i = this.start in while i < end, i = i + 1 then {
                result.append(this.array.get(i))
            }

            result
        )

    fun get(this, index: U64) : T = this.array.get(this.start + index)
}
