module Numbers::Nat

import Numbers (Nat (Nat (Succ, Zero)))
import Core (Bool (True, False))

variant Nat {
    Zero
    Succ(Nat)

    fun add(this, that : Nat) : Nat = match that {
        let .Zero    : this
        let .Succ(n) : Succ(this + n)
    }

    fun multiply(this, that : Nat) : Nat = match that {
        let .Zero    : Zero
        let .Succ(n) : this + (this * n)
    }

    fun equals(this, that : Nat) : Bool = match this, that {
        let .Zero   , .Zero    : True
        let .Succ(n), .Succ(m) : n == m
        let this    , that     : False
    }
}

fun inc(n : Nat) : Nat = Succ(n)